<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context   
 		 http://www.springframework.org/schema/context/spring-context-3.0.xsd" >
    
    <!-- Spring 通过一个 BeanPostProcessor 对 @Autowired 进行解析，所以要让@Autowired 起作用必须事先在 Spring 容器中声明AutowiredAnnotationBeanPostProcessor Bean。 -->
	<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 --> 
	<!-- 当 Spring 容器启动时，AutowiredAnnotationBeanPostProcessor 将扫描 Spring 容器中所有 Bean，
		  当发现 Bean中拥有@Autowired 注解时就找到和其匹配（默认按类型匹配）的 Bean，并注入到对应的地方中去。 -->
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>
	
	<!-- Spring 2.1 添加了一个新的 context 的 Schema 命名空间，该命名空间对注释驱动、属性文件引入、加载期织入等功能提供了便捷的配置 -->
	<!-- 在配置文件中使用 context 命名空间之前，必须在 <beans> 元素中声明 context 命名空间 -->
	<!-- 注解本身是不会做任何事情的，它仅提供元数据信息。要使（注解）元数据信息真正起作用，必须让负责处理这些元数据的处理器工作起来 -->
	<!-- <context:annotation-config/> 将隐式地向 Spring 容器注册类似于AutowiredAnnotationBeanPostProcessor的各个BeanPostProcessor -->
	<context:annotation-config/>
	
	<!-- 由于自动注入，则可以移除 boss Bean 的属性注入配置的信息 --> 
   	<bean id="boss" class="com.spring.simplification.bean.annotation.Boss" />

	<!-- 在默认情况下使用 @Autowired 注解进行自动注入时，Spring 容器中匹配的候选 Bean 数目必须有且仅有一个。
		  当找不到一个匹配的 Bean 时，Spring 容器将抛出BeanCreationException 异常，并指出必须至少拥有一个匹配的 Bean。 -->
	
	<!-- 此时解决办法为：（1）找不到匹配：@Autowired(required = false)，这等于告诉 Spring：在找不到匹配 Bean 时也不报错；
		 （2）多个匹配：@Autowired 和@Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName。@Autowired 可以对成员变量、方法以及构造函数进行注释，
		  而@Qualifier 的标注对象是成员变量、方法入参、构造函数入参。正是由于注释对象的不同，所以 Spring 不将 @Autowired 和@Qualifier 统一成一个注释类。 -->
	
   	<bean id="office" class="com.spring.simplification.bean.annotation.Office">
   		<property name="officeNo" value="002"  />
   	</bean>
   	
   	<bean id="office2" class="com.spring.simplification.bean.annotation.Office">
   		<property name="officeNo" value="003"  />
   	</bean>
   
   	<bean id="car" class="com.spring.simplification.bean.annotation.Car">
   		<property name="brand" value=" 红旗 CA72"/>  
        <property name="price" value="2000"/> 
   	</bean>
</beans>
