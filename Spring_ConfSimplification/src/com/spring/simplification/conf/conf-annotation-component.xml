<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context   
 		 http://www.springframework.org/schema/context/spring-context-3.0.xsd" >
 	
 	<!-- <context:component-scan/> 的 base-package 属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理 -->
 	
 	<!-- 注意： <context:component-scan/> 配置项不但启用了对类包进行扫描以实施注释驱动 Bean定义的功能，同时还启用了注释驱动自动注入的功能。
 		  因此当使用 <context:component-scan/> 后，就可以将 <context:annotation-config/> 移除 -->
 	
    <context:component-scan base-package="com.spring.simplification.bean">
    	<!-- <context:component-scan/> 还允许定义过滤器将基包下的某些类纳入或排除 -->
    	<context:include-filter type="regex"   expression="com.spring.simplification.bean.annotation..*"/>  
    	<context:exclude-filter type="regex"   expression="com.spring.simplification.bean.autowire..*"/>
    </context:component-scan>  
    
    <!-- @Repository 只能标注在 DAO 类上。这是因为该注解的作用不只是将类识别为 Bean，同时它还能将所标注的类中抛出的数据访问异常封装为 Spring 的数据访问异常类型。 
    	 Spring 本身提供了一个丰富的并且是与具体的数据访问技术无关的数据访问异常结构，用于封装不同的持久层框架抛出的异常，使得异常独立于底层的框架 -->
    
   	<!--  Spring 2.5 在 @Repository 的基础上增加了功能类似的额外三个注解：@Component、@Service、@Constroller，它们分别用于软件系统的不同层次：
		@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。
		@Service 通常作用在业务层，但是目前该功能与 @Component 相同。
		@Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。
	通过在类上使用 @Repository、@Component、@Service 和 @Constroller 注解，Spring 会自动创建相应的 BeanDefinition 对象，
	并注册到 ApplicationContext 中。这些类就成了 Spring 受管组件。这三个注解除了作用于不同软件层次的类，其使用方式与 @Repository 是完全相同的。 -->
	
	<!-- 建议：如果 Web 应用程序采用了经典的三层分层结构的话，
		  最好在持久层、业务层和控制层分别采用@Repository、@Service 和 @Controller 对分层中的类进行注释，而用@Component 对那些比较中立的类进行注释。 -->
		  
	<!-- 在实现应用中，我们往往需要同时使用注释配置和 XML 配置，
		  对于自定义类级别且不会发生变动的配置可以优先考虑注释配置；而对于那些第三方类以及容易发生调整的配置则应优先考虑使用 XML 配置。
		 Spring 会在具体实施 Bean 创建和 Bean 注入之前将这两种配置方式的元信息融合在一起。 -->
</beans>
